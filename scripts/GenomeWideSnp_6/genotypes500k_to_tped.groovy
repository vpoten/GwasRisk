#!/usr/bin/env groovy

import java.util.zip.GZIPInputStream

// config variables
def PREFIX = ''
def regexGenoTxt = /(\d+)_.+\.brlmm\.(\w+)\.txt\.gz/
def CHR_LIST = (1..22).collect{it as String}
def BASES = ['A','T','G','C']
def MISS_GENO = '?'
def SETS = ['MS','MSRD','NPU']
def ARRAYS = ['nsp','sty']
def intPath = '/genotypes/export/'

//file fields
def F_BASES = 6 //6 or 7
def F_RSID = 8
def F_POS = 9

def createReader = { file->
    (file.name.endsWith('.gz')) ? 
        new BufferedReader(new InputStreamReader(new GZIPInputStream(new FileInputStream(file)))) : file.newReader()
}//

//get and check args
if( !this.args || this.args.length!=3 ){
    println 'Convert separate genotype files generated by Genotyping console to Plink (PED)'
    println 'usage: genotypes500k_to_tped.groovy <input_dir> <output_dir> <tfam_base_file>'
    return 1
}

String input = this.args[0]
String output = this.args[1]
String tfam = this.args[2]

if( !input.endsWith('/') ){ input+='/'}
if( !output.endsWith('/') ){ output+='/'}

println "Input dir: ${input}"
println "Output dir: ${output}"
println "Tfam file: ${tfam}"

println "Start time: ${new Date()}"

def subjects = [:] as TreeMap
def missingSubj = [] as TreeSet

// 1: get matching files

SETS.each{ set->
    ARRAYS.each{ arr->
        def dir = input+set+intPath+arr+'/'
        def genotypeFiles = new File(dir).list({d, f-> f ==~ regexGenoTxt } as FilenameFilter).toList()
        
        genotypeFiles.each{ file->
            def id = (file=~regexGenoTxt)[0][1]
            
            def map = subjects[id]
            if( map==null ){
                map = [:]
                subjects[id] = map
            }
            
            if( map[arr]==null ){
                map[arr] = []
            }
            
            map[arr] << (new File(dir+file))//each subject must have 2 list of files (nsp & sty)
        }
    }
}

println "Read ${subjects.size()} subjects from array files"

subjects.each{ id, map-> //check for missing arrays
    if( map.size()<2 ){
        println "Missing array in subject ${id}: ${map.keySet()}"
    }
}



// 2: read tfam file
def tfamMap = [:] as TreeMap //map: key=subject value=tfam line
boolean errors = false

new File(tfam).eachLine{ line->
    def toks = line.split("\t")
    
    if( tfamMap.containsKey(toks[1]) ){
        System.err.println("Duplicate subject ${toks[1]}")
        errors = true
    }
    
    tfamMap[toks[1]] = line
}

subjects.keySet().each{ //check subjects in tfam
    if( !tfamMap.containsKey(it) ){
        System.err.println("Missing ${it} subject in tfam")
        errors = true
    }
}

println "Read ${tfamMap.size()} subjects from tfam file"


if( subjects.size()<tfamMap.size() ){
    tfamMap.keySet().each{
        if( !(it in subjects.keySet()) ){
            println "Missing ${it} subject in array files"
            missingSubj << it
        }
    }
}

if( errors ){
    return 1
}

def snpMap = [:] as TreeMap
def snpMapPos = [:] as TreeMap

// 3: generate map files
CHR_LIST.each{ chr->
    snpMap[chr] = [:] as TreeMap
    snpMapPos[chr] = [:] as TreeMap
    
    println "Reading SNPs for chr${chr}"
    
    //collect snps
    subjects.each{ subj, map->
        map.each{ arr, list->
            def file = list.find{ (it.name =~ regexGenoTxt)[0][2]==chr }

            def reader = createReader(file)
            
            reader.splitEachLine("\t"){ toks->
                if( !toks[0].startsWith('#') && !toks[0].startsWith('Probe') ){
                    def id = toks[F_RSID]
                    def pos = toks[F_POS] as Integer

                    if( !snpMap[chr].containsKey(id) ){
                        snpMap[chr][id] = pos
                        snpMapPos[chr][pos] = id
                    }
                }
            }

            reader.close()
        }
    }//end subjects
    
    // generate map file
    /**
    chromosome (1-22, X, Y or 0 if unplaced)
    rs# or snp identifier
    Genetic distance (morgans)
    Base-pair position (bp units)
    **/
    writer = new PrintWriter("${output}${PREFIX}_${chr}.map")
    
    snpMapPos[chr].each{ pos, snp->
        writer.println("${chr}\t${snp}\t${0}\t${pos}")
    }

    writer.close()
}//end CHR

//print chr statistics
println "\nSNPS count:"
int total = 0
snpMap.each{ chr, snps->
    println "chr${chr}=${snps.size()}"
    total += snps.size()
}
println "total=${total}\n"

// 4: generate ped files
CHR_LIST.each{ chr->
    writer = new PrintWriter("${output}${PREFIX}_${chr}.ped")
    println "Processing genotypes for chr${chr}"
    
    subjects.each{ subj, map->
        //collect subject genotypes
        def subjGeno = [:] as TreeMap

        map.each{ arr, list->
            def file = list.find{ (it.name =~ regexGenoTxt)[0][2]==chr }
        
            def reader = createReader(file)
            
            reader.splitEachLine("\t"){ toks->
                if( !toks[0].startsWith('#') && !toks[0].startsWith('Probe') ){
                    def bases = toks[F_BASES]

                    if( bases[0] in BASES ){
                        subjGeno[toks[F_RSID]] = bases
                    }
                    else{
                        subjGeno[toks[F_RSID]] = MISS_GENO+MISS_GENO
                    }
                }
            }

            reader.close()
        }
        
        /**
        Family ID
        Individual ID
        Paternal ID
        Maternal ID
        Sex (1=male; 2=female; other=unknown)
        Phenotype
        **/
        ///writer.print("${subj}\t${subj}\t${0}\t${0}\t${0}\t${-9}")
        writer.print(tfamMap[subj])
        
        snpMapPos[chr].each{ pos, snp->
            def alleles = (subjGeno[snp]) ?: MISS_GENO+MISS_GENO
            writer.print("\t${alleles[0]}\t${alleles[1]}")
        }
        
        writer.print('\n')
    }//end subjects
    
    writer.close()
}//end CHR


println "End time: ${new Date()}"

return 0